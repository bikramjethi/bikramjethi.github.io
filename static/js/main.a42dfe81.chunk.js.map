{"version":3,"sources":["App.style.js","components/atoms/Button/Button.style.js","components/templates/Home/Home.js","components/templates/Intro/Intro.js","components/templates/Contact/Contact.js","components/templates/Resume/Resume.js","components/templates/Projects/Projects.js","utils/index.js","components/organisms/Header/Header.style.js","components/molecules/NavBar/NavBar.style.js","components/molecules/NavBar/NavBar.js","components/organisms/Header/Header.js","App.js","serviceWorker.js","index.js"],"names":["styled","div","button","Home","Intro","Contact","Resume","Projects","checkViewPort","window","matchMedia","matches","header","nav","NavBar","to","Header","isMobileView","useState","App","props","onResize","setState","state","displayHeader","this","addEventListener","removeEventListener","onClick","path","exact","component","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0yBAEeA,UAAOC,IAAtB,K,4FCAeD,IAAOE,OAAtB,KAAeF,ICaAG,EAbF,kBACX,6BACG,IACD,gEACA,+SCFWC,EAFD,kBAAM,4CCELC,EAFC,kBAAM,8CCEPC,EAFA,kBAAM,6CCENC,EAFE,kBAAM,+CCFVC,EAAgB,WAC3B,OAAOC,OAAOC,WAAW,qBAAqBC,S,6ECCjCX,UAAOY,OAAtB,K,qRCDeZ,UAAOa,IAAtB,KC4BeC,EAzBA,WACb,OACE,kBAAC,EAAD,KACG,IACD,4BACE,kBAAC,IAAD,CAAMC,GAAG,KACP,qCAEF,kBAAC,IAAD,CAAMA,GAAG,SACP,sCAEF,kBAAC,IAAD,CAAMA,GAAG,UACP,uCAEF,kBAAC,IAAD,CAAMA,GAAG,YACP,yCAEF,kBAAC,IAAD,CAAMA,GAAG,WACP,2CCTKC,EATA,SAAC,GAAqB,EAAnBC,aAAoB,IAAD,EACKC,oBAAS,GADd,6BAEnC,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,QCqDSC,E,YA9Cb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAeRC,SAAW,WAET,IAAMJ,EAAeT,IACrB,EAAKc,SAAS,CAAEL,kBAjBhB,EAAKM,MAAQ,CACXN,cAAc,EACdO,eAAe,GAJA,E,iFAQjBC,KAAKH,SAAS,CAAEL,aAAcT,MAC9BC,QAAUA,OAAOiB,iBAAiB,SAAUD,KAAKJ,Y,6CAIjDZ,QAAUA,OAAOkB,oBAAoB,SAAUF,KAAKJ,Y,+BAS5C,IAAD,SACiCI,KAAKF,MAArCN,EADD,EACCA,aAAcO,EADf,EACeA,cACtB,OACE,kBAAC,EAAD,KACE,kBAAC,IAAD,MACIA,GAAiBP,GACjB,4BAAQW,QAAS,kBAAM,EAAKN,SAAS,CAACE,eAAc,MAApD,oBAECP,GAAgBO,IACjB,kBAAC,EAAD,CAAQP,aAAcA,IAExB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOY,KAAK,IAAIC,OAAK,EAACC,UAAW5B,IACjC,kBAAC,IAAD,CAAO0B,KAAK,SAASE,UAAW3B,IAChC,kBAAC,IAAD,CAAOyB,KAAK,UAAUE,UAAWzB,IACjC,kBAAC,IAAD,CAAOuB,KAAK,YAAYE,UAAWxB,IACnC,kBAAC,IAAD,CAAOsB,KAAK,WAAWE,UAAW1B,W,GAvC5B2B,aCFEC,QACW,cAA7BxB,OAAOyB,SAASC,UAEe,UAA7B1B,OAAOyB,SAASC,UAEhB1B,OAAOyB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a42dfe81.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport default styled.div`\n  min-height: 100vh;\n  background: #453f86;\n  display: flex;\n\n  ol,\n  ul {\n    list-style: none;\n  }\n\n  a {\n    text-decoration: none;\n  }\n\n  header {\n    min-width: 80%;\n    background: #393737;\n  }\n\n  @media screen and (min-width: 768px) {\n    header {\n      min-width: 200px;\n    }\n  }\n\n  @media screen and (min-width: 1024px) {\n    header {\n      min-width: 250px;\n    }\n  }\n`;\n","import styled from \"styled-components\";\n\nexport default styled.button`\n  color: red;\n`;\n","import React from \"react\";\n\nconst Home = () => (\n  <div>\n    {\" \"}\n    <h1>Bikram Jethi (FronEnd Developer)</h1>\n    <p>\n      A passionate Front-end Web Developer with a knack for stunning designs, a\n      heart for social causes and a  never-ending zeal to learn and embrace new\n      technologies aims to expand his knowledge working for a  progressive\n      organization and contribute towards its growth.\n    </p>\n  </div>\n);\n\nexport default Home;\n","import React from \"react\";\n\nconst Intro = () => <div>Intro Page</div>;\n\nexport default Intro;\n","import React from \"react\";\n\nconst Contact = () => <div>Contact Page</div>;\n\nexport default Contact;\n","import React from \"react\";\n\nconst Resume = () => <div>Resume Page</div>;\n\nexport default Resume;\n","import React from \"react\";\n\nconst Projects = () => <div>Projects Page</div>;\n\nexport default Projects;\n","export const checkViewPort = () => {\n  return window.matchMedia(\"(max-width:768px)\").matches;\n};\n","import styled from \"styled-components\";\n\nexport default styled.header``;\n","import styled from \"styled-components\";\nexport default styled.nav`\n  height: 100vh;\n  ul {\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    padding: 10px 20px;\n  }\n\n  a {\n    padding: 10px 20px;\n    border-radius: 5px;\n  }\n`;\n","import React from \"react\";\nimport StyledNavBar from \"./NavBar.style\";\nimport { Link } from \"react-router-dom\";\n\nconst NavBar = () => {\n  return (\n    <StyledNavBar>\n      {\" \"}\n      <ul>\n        <Link to=\"/\">\n          <li>Home</li>\n        </Link>\n        <Link to=\"intro\">\n          <li>Intro</li>\n        </Link>\n        <Link to=\"resume\">\n          <li>Resume</li>\n        </Link>\n        <Link to=\"projects\">\n          <li>Projects</li>\n        </Link>\n        <Link to=\"contact\">\n          <li>Contact</li>\n        </Link>\n      </ul>\n    </StyledNavBar>\n  );\n};\n\nexport default NavBar;\n","import React, { useState } from \"react\";\nimport StyledHeader from \"./Header.style\";\nimport NavBar from \"../../molecules/NavBar\";\n\nconst Header = ({ isMobileView }) => {\n  const [displayHeader, setHeaderState] = useState(false);\n  return (\n    <StyledHeader>\n      <NavBar />\n    </StyledHeader>\n  );\n};\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport StyledApp from \"./App.style\";\nimport \"./App.css\";\nimport Button from \"./components/atoms/Button\";\n\nimport Home from \"./components/templates/Home\";\nimport Intro from \"./components/templates/Intro\";\nimport Contact from \"./components/templates/Contact\";\nimport Resume from \"./components/templates/Resume\";\nimport Projects from \"./components/templates/Projects\";\nimport { checkViewPort } from \"./utils\";\nimport Header from \"./components/organisms/Header\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isMobileView: false,\n      displayHeader: false\n    };\n  }\n  componentDidMount() {\n    this.setState({ isMobileView: checkViewPort() });\n    window && window.addEventListener(\"resize\", this.onResize);\n  }\n\n  componentWillUnmount() {\n    window && window.removeEventListener(\"resize\", this.onResize);\n  }\n\n  onResize = () => {\n    //  eslint-disable-next-line\n    const isMobileView = checkViewPort();\n    this.setState({ isMobileView });\n  };\n\n  render() {\n    const { isMobileView, displayHeader } = this.state;\n    return (\n      <StyledApp>\n        <Router>\n          {!displayHeader && isMobileView && (\n            <button onClick={() => this.setState({displayHeader:true})}>Display header</button>\n          )}\n          {(!isMobileView || displayHeader) && (\n            <Header isMobileView={isMobileView} />\n          )}\n          <Switch>\n            <Route path=\"/\" exact component={Home} />\n            <Route path=\"/intro\" component={Intro} />\n            <Route path=\"/resume\" component={Resume} />\n            <Route path=\"/projects\" component={Projects} />\n            <Route path=\"/contact\" component={Contact} />\n          </Switch>\n        </Router>\n      </StyledApp>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["App.style.js","components/atoms/Button/Button.style.js","components/molecules/NavBar/NavBar.style.js","components/molecules/NavBar/NavBar.js","components/templates/Home/Home.js","components/templates/Intro/Intro.js","components/templates/Contact/Contact.js","components/templates/Resume/Resume.js","components/templates/Projects/Projects.js","App.js","serviceWorker.js","index.js"],"names":["styled","div","button","nav","NavBar","Home","Intro","Contact","Resume","Projects","App","id","class","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0pBACeA,UAAOC,IAAtB,K,sFCCeD,IAAOE,OAAtB,K,qECDeF,UAAOG,IAAtB,KCiBeC,EAdA,WACb,OACE,kBAAC,EAAD,KACG,IACD,4BACE,qCACA,sCACA,wCACA,0CCROC,EAFF,kBAAM,2CCEJC,EAFD,kBAAM,4CCELC,EAFC,kBAAM,8CCEPC,EAFA,kBAAM,6CCENC,EAFE,kBAAM,+CCyCRC,MA/Bf,WACE,OACE,kBAAC,EAAD,KACE,kBAAC,IAAD,KACE,4BAAQC,GAAG,UACT,kBAAC,EAAD,MACA,yBAAKC,MAAM,WACT,yBAAKA,MAAM,SACT,gEACA,gTAUN,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWV,IACjC,kBAAC,IAAD,CAAOQ,KAAK,SAASE,UAAWT,IAChC,kBAAC,IAAD,CAAOO,KAAK,UAAUE,UAAWP,IACjC,kBAAC,IAAD,CAAOK,KAAK,YAAYE,UAAWN,IACnC,kBAAC,IAAD,CAAOI,KAAK,WAAWE,UAAWR,QCxBxBS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a5db6b2c.chunk.js","sourcesContent":["import styled from \"styled-components\";\nexport default styled.div`\n  * {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n  }\n\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-between;\n  position: relative;\n  min-height: 100vh;\n  width: 100%;\n  padding: 4rem 2rem;\n  z-index: 3;\n\n  ol,\n  ul {\n    list-style: none;\n  }\n`;\n","import styled from \"styled-components\";\n\nexport default styled.button`\n  color: red;\n`;\n","import styled from \"styled-components\";\nexport default styled.nav``;\n","import React from \"react\";\nimport StyledNavBar from \"./NavBar.style\";\nimport { Link } from \"react-router-dom\";\n\nconst NavBar = () => {\n  return (\n    <StyledNavBar>\n      {\" \"}\n      <ul>\n        <li>Intro</li>\n        <li>Resume</li>\n        <li>Projects</li>\n        <li>Contact</li>\n      </ul>\n    </StyledNavBar>\n  );\n};\n\nexport default NavBar;\n","import React from 'react';\n\nconst Home = () => <div>Home Page</div>;\n\nexport default Home;","import React from \"react\";\n\nconst Intro = () => <div>Intro Page</div>;\n\nexport default Intro;\n","import React from \"react\";\n\nconst Contact = () => <div>Contact Page</div>;\n\nexport default Contact;\n","import React from \"react\";\n\nconst Resume = () => <div>Resume Page</div>;\n\nexport default Resume;\n","import React from \"react\";\n\nconst Projects = () => <div>Projects Page</div>;\n\nexport default Projects;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport StyledApp from \"./App.style\";\nimport Button from \"./components/atoms/Button\";\nimport NavBar from \"./components/molecules/NavBar/NavBar\";\n\nimport Home from \"./components/templates/Home\";\nimport Intro from \"./components/templates/Intro\";\nimport Contact from \"./components/templates/Contact\";\nimport Resume from \"./components/templates/Resume\";\nimport Projects from \"./components/templates/Projects\";\n\nfunction App() {\n  return (\n    <StyledApp>\n      <Router>\n        <header id=\"header\">\n          <NavBar />\n          <div class=\"content\">\n            <div class=\"inner\">\n              <h1>Bikram Jethi (FronEnd Developer)</h1>\n              <p>\n                A passionate Front-end Web Developer with a knack for stunning\n                designs, a heart for social causes and a  never-ending zeal to\n                learn and embrace new technologies aims to expand his knowledge\n                working for a  progressive organization and contribute towards\n                its growth.\n              </p>\n            </div>\n          </div>\n        </header>\n        <Switch>\n          <Route path=\"/\" exact component={Home} />\n          <Route path=\"/intro\" component={Intro} />\n          <Route path=\"/resume\" component={Resume} />\n          <Route path=\"/projects\" component={Projects} />\n          <Route path=\"/contact\" component={Contact} />\n        </Switch>\n      </Router>\n    </StyledApp>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}